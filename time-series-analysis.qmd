---
title: "Time Series Analysis of Spotify Data"
author: Frankie, Anna, Piper, Kate, Ayaan
format: 
  html:
    self-contained: true
---

```{r setup, echo=FALSE, message=FALSE, include = FALSE}
# load packages
library(tidyverse)
library(knitr)
library(broom)
library(gridExtra)
library(cowplot)
library(xts)
library(forecast)
library(yardstick)
library(lubridate)
library(fable)
library(patchwork)
```

```{r load-data, message=FALSE, include = FALSE}
# load data
spotify_data = read_csv("data/spotify_data.csv")
```

## Introduction

Companies are always looking for methods to analyze the popularity of their products, as well as what predicts that popularity over time. The music industry is no different: Spotify has developed a popularity index that ranks songs from 0 to 100 on how popular they are compared to other songs. The score has three components: total streams of a song, how recently a song has been played, and the frequency at which a song is played. This score is immensely useful to Spotify and to music industry professionals on a song-by-song basis, because having a high popularity score increases a song's discoverability to listeners. However, modeling mean values of song popularity over time also has the potential to be useful for Spotify (or similar streaming platforms), because it could help companies understand the factors that play into users' satisfaction with the platform and listening patterns over time, as well as predict future values of popularity that might inform business decisions. We have obtained a Kaggle dataset containing information about audio features of more than 160,000 Spotify songs that were released between 1921 and 2020. While several previous analyses have looked at this data and even examined the relationships between features and popularity, these projects have ignored the implicit potential for temporal autocorrelation in the data. Because the total number of listens for a given song inevitably increases over time, and because frequency and recency of listens depend in large part on media attention and artist activity, the mean song popularity for songs released in one month is likely to be highly related to that of songs released the previous month. Our goal for this project is to create a model of the mean popularity for songs released at given intervals over time using song feature data as predictors and ARIMA errors to account for leftover temporal autocorrelation. 

## Data Preparation and Exploratory Data Analysis

The original dataset for this project contains nineteen variables, including song name, artist, name, release date, and audio features including acousticness, danceability, loudness and energy. A full codebook of all variables and their definitions is located in the data folder of this repository (`spotify_data_codebook.md`). The original data contained audio features and identification information for 169,909 songs. 

### Data Preparation

First, we altered the structure of our data, creating a new dataset (`spotify_mean_yearly`) that contains each year from 1921 to 2010 and the mean values of the following feature variables: acousticness, danceability, duration, energy, explicit, instrumentalness, key, liveness, loudness, mode, popularity, speechiness, tempo, and valence. We also created a dataset at monthly granularity. Notably, filtering the release date for only observations that contain monthly data makes the dataset substantially smaller, but we don't have a strong reason to believe that this will produce bias in the data especially given that even some very recent songs with high popularity scores were missing month/ day of release information. 

```{r clean data, message = FALSE, include = FALSE}
# data cleaning
cols_to_drop <- c("year", "release_date", "id", "name", "artists")
all_cols <- colnames(spotify_data)
stat_cols<- all_cols[all_cols %in% cols_to_drop == FALSE]

#create yearly granularity dataset 
spotify_mean_yearly <- spotify_data %>% 
  group_by(year) %>% 
  summarise_at(stat_cols, list(year_mean = mean)) %>% 
  filter(year < 2020)

#create monthly granularity dataset 
spotify_mean_monthly <- spotify_data %>% 
  filter(nchar(release_date) > 7) %>%
  group_by(month = lubridate::floor_date(as.Date(release_date), 'month')) %>% 
  summarise_at(stat_cols, list(month_mean = mean)) %>% 
  filter(month < '2020-01-01')
```

### EDA: Trends over time

In order to get a general sense of the trends in this data, we plotted the mean yearly values of each of the song feature variables.  

```{r visualize yearly data, message = FALSE, include = FALSE}
# data visualization for yearly trends
pop_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, y = popularity_year_mean)) +
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Popularity Mean",
    title = "Yearly time series of Popularity"
  )

loud_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, y = loudness_year_mean)) +
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Loudness Mean",
    title = "Yearly time series of Loudness"
  )

acoustic_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, y = acousticness_year_mean)) +
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Acousticness Mean",
    title = "Yearly time series of Acoustic"
  )

energy_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, y = energy_year_mean)) +
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Energy Mean",
    title = "Yearly time series of Energy"
  )

danceability_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, danceability_year_mean))+
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Danceability Mean",
    title = "Yearly time series of Danceability"
  )

liveness_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, liveness_year_mean))+
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Liveness Mean",
    title = "Yearly time series of Liveness"
  )

duration_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, duration_ms_year_mean))+
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Duration Mean",
    title = "Yearly time series of Duration"
  )

instrumentalness_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, instrumentalness_year_mean))+
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Instrumentalness Mean",
    title = "Yearly ts of Instrumentalness"
  )

explicitness_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, explicit_year_mean))+
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Explicitness Mean",
    title = "Yearly ts of Explicitness"
  )

speechiness_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, speechiness_year_mean))+
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Speechiness Mean",
    title = "Yearly ts of Speechiness"
  )

tempo_line_plot <- ggplot(data = spotify_mean_yearly, aes(x = year, tempo_year_mean))+
  geom_line() + 
  labs(
    x = "Year",
    y = "Song Tempo Mean",
    title = "Yearly Time Series of Tempo"
  )
grid.arrange(pop_line_plot, loud_line_plot, acoustic_line_plot, energy_line_plot, nrow = 2)

grid.arrange(liveness_line_plot, danceability_line_plot, duration_line_plot, instrumentalness_line_plot, nrow = 2)

grid.arrange(explicitness_line_plot, speechiness_line_plot, tempo_line_plot, nrow = 2)
```
Of note, mean song popularity increased steeply over time. This probably has to do with the rise of the internet and free music streaming, which happened during the last couple of decades. However, mean song popularity decreased sharply in the last couple of years-- perhaps because not as many people have had the chance to listen to certain songs yet. Mean loudness and energy have generally increased over time, while mean song acousticness has dropped. Mean song liveness and instrumetalness had moderate downward trends. Mean song duration rose over time but has dropped again in the last couple of decades. Song danceability fell from the 1920s to the 1950s but has been on an upward trajectory ever since.

Now, we plotted the plot the mean monthly values of each of the song feature variables to examine these trends at a more granular level.

```{r monthly data, message = FALSE, include = FALSE}
# data visualization for monthly
pop_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, y = popularity_month_mean)) +
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Popularity Mean",
    title = "Monthly time series of Popularity"
  )

loud_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, y = loudness_month_mean)) +
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Loudness Mean",
    title = "Monthly time series of Loudness"
  )

acoustic_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, y = acousticness_month_mean)) +
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Acousticness Mean",
    title = "Monthly time series of Acoustic"
  )

energy_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, y = energy_month_mean)) +
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Energy Mean",
    title = "Monthly time series of Energy"
  )

danceability_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, danceability_month_mean))+
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Danceability Mean",
    title = "Monthly time series of Danceability"
  )

liveness_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, liveness_month_mean))+
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Liveness Mean",
    title = "Monthly time series of Liveness"
  )

duration_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, duration_ms_month_mean))+
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Duration Mean",
    title = "Monthly time series of Duration"
  )

instrumentalness_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, instrumentalness_month_mean))+
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Instrumentalness Mean",
    title = "Monthly ts of Instrumentalness"
  )

explicitness_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, explicit_month_mean))+
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Explicitness Mean",
    title = "Montly ts of Explicitness"
  )

speechiness_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, speechiness_month_mean))+
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Speechiness Mean",
    title = "Monthly ts of Speechiness"
  )

tempo_line_plotm <- ggplot(data = spotify_mean_monthly, aes(x = month, tempo_year_month))+
  geom_line() + 
  labs(
    x = "Month",
    y = "Song Tempo Mean",
    title = "Monthly Time Series of Tempo"
  )

grid.arrange(pop_line_plotm, loud_line_plotm, acoustic_line_plotm, energy_line_plotm, nrow = 2)

grid.arrange(liveness_line_plotm, danceability_line_plotm, duration_line_plotm, instrumentalness_line_plotm, nrow = 2)

grid.arrange(explicitness_line_plotm, speechiness_line_plotm, tempo_line_plotm, nrow = 2)
```

After plotting at a monthly timescale, we can see more nuance in these trends. For instance, the downward trend in liveness that we observed in the yearly time series for liveness appeared to be more related to a couple of months early in the century with particularly high liveness that biased the averages. Similarly, for instrumentalness, there seemed to be much more variance in mean monthly values early in the century that created the illusion of a crisper downward trend. Because these monthly time series apear to give us far more information than yearly time series, at this point we chose to create a model that explains monthly mean popularity based on monthly mean predictor values rather than using a yearly temporal granularity. Additionally, the ability to predict monthly mean popularity would likely be more useful for a company than yearly in terms of making timely and specific business decisions. 

### Bivariate EDA: Relationships between popularity and song features 

```{r bv plots, message = FALSE, include = FALSE}
#need to add titles & fix axes 
dance_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=danceability_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.25, se = FALSE) 

loud_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=loudness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

energy_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=energy_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

instrumentalness_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=instrumentalness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

acousticness_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=acousticness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

liveness_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=liveness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

duration_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=duration_ms_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

explicitness_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=explicit_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

speechiness_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=speechiness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

tempo_bveda <- spotify_mean_monthly %>%
  ggplot(aes(x=tempo_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) 

grid.arrange(dance_bveda, loud_bveda, energy_bveda, instrumentalness_bveda, nrow = 2)

grid.arrange(acousticness_bveda, liveness_bveda, duration_bveda, NULL, nrow = 2)

grid.arrange(explicitness_bveda, speechiness_bveda, tempo_bveda, NULL, nrow = 2)
```

```{r}
spotify_decades <- spotify_mean_monthly %>%
  mutate(year = as.numeric(format(month,'%Y'))) %>%
  mutate(decade = year - year %% 10 )
```

```{r}
spotify_decades %>%
  ggplot(aes(x=danceability_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.25, se = FALSE) + 
  facet_wrap(~decade)

spotify_decades %>%
  ggplot(aes(x=loudness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) + 
  facet_wrap(~decade)

spotify_decades %>%
  ggplot(aes(x=energy_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) + 
  facet_wrap(~decade)
spotify_decades %>%
  ggplot(aes(x=instrumentalness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) + 
  facet_wrap(~decade)

spotify_decades %>%
  ggplot(aes(x=acousticness_month_mean, y = popularity_month_mean)) + 
  geom_point() + 
  geom_smooth(color='blue', alpha = 0.75,se = FALSE, method = "lm") + 
  geom_smooth(color = "red", alpha = 0.75, se = FALSE) + 
  facet_wrap(~decade)
```

### Checking cross correlation 

```{r, echo=FALSE, results='hide'}
#lag correlations of energy on popularity 
spotify_mean_monthly %>%
  filter(popularity_month_mean > 0) %>%
  select(month, energy_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(energy_month_mean,0),
    "lag 1" = lag(energy_month_mean,1),
    "lag 2" = lag(energy_month_mean,2),
    "lag 3" = lag(energy_month_mean,3),
    "lag 4" = lag(energy_month_mean,4),
    "lag 5" = lag(energy_month_mean,5),
    "lag 6" = lag(energy_month_mean,6),
    "lag 7" = lag(energy_month_mean,7),
    "lag 8" = lag(energy_month_mean,8),
    "lag 9" = lag(energy_month_mean,9),
    "lag 10" = lag(energy_month_mean,10),
    "lag 11" = lag(energy_month_mean,11))%>%
  select(-energy_month_mean, -month) %>%
  tidyr::gather(lag, energy_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(energy_month_mean, popularity_month_mean, use="complete.obs"))

#lag correlations of danceability on popularity 
spotify_mean_monthly %>%
  select(month, danceability_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(danceability_month_mean,0),
    "lag 1" = lag(danceability_month_mean,1),
    "lag 2" = lag(danceability_month_mean,2),
    "lag 3" = lag(danceability_month_mean,3),
    "lag 4" = lag(danceability_month_mean,4),
    "lag 5" = lag(danceability_month_mean,5),
    "lag 6" = lag(danceability_month_mean,6),
    "lag 7" = lag(danceability_month_mean,7),
    "lag 8" = lag(danceability_month_mean,8),
    "lag 9" = lag(danceability_month_mean,9),
    "lag 11" = lag(danceability_month_mean,11),
    "lag 10" = lag(danceability_month_mean,10))  %>%
  select(-danceability_month_mean, -month) %>%
  tidyr::gather(lag, danceability_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(danceability_month_mean, popularity_month_mean, use="complete.obs"))

#lag correlations of loudness on popularity 
spotify_mean_monthly %>%
  select(month, loudness_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(loudness_month_mean,0),
    "lag 1" = lag(loudness_month_mean,1),
    "lag 2" = lag(loudness_month_mean,2),
    "lag 3" = lag(loudness_month_mean,3),
    "lag 4" = lag(loudness_month_mean,4),
    "lag 5" = lag(loudness_month_mean,5),
    "lag 6" = lag(loudness_month_mean,6),
    "lag 7" = lag(loudness_month_mean,7),
    "lag 8" = lag(loudness_month_mean,8),
    "lag 9" = lag(loudness_month_mean,9),
    "lag 11"= lag(loudness_month_mean,11),
    "lag 10"= lag(loudness_month_mean,10))  %>%
  select(-loudness_month_mean, -month) %>%
  tidyr::gather(lag, loudness_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(loudness_month_mean, popularity_month_mean, use="complete.obs"))

#lag correlations of acousticness on popularity 
spotify_mean_monthly %>%
  select(month, acousticness_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(acousticness_month_mean,0),
    "lag 1" = lag(acousticness_month_mean,1),
    "lag 2" = lag(acousticness_month_mean,2),
    "lag 3" = lag(acousticness_month_mean,3),
    "lag 4" = lag(acousticness_month_mean,4),
    "lag 5" = lag(acousticness_month_mean,5),
    "lag 6" = lag(acousticness_month_mean,6),
    "lag 7" = lag(acousticness_month_mean,7),
    "lag 8" = lag(acousticness_month_mean,8),
    "lag 9" = lag(acousticness_month_mean,9),
    "lag 11"= lag(acousticness_month_mean,11),
    "lag 10"= lag(acousticness_month_mean,10))  %>%
  select(-acousticness_month_mean, -month) %>%
  tidyr::gather(lag, acousticness_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(acousticness_month_mean, popularity_month_mean, use="complete.obs"))

#lag correlations of duration on popularity 
spotify_mean_monthly %>%
  select(month, duration_ms_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(duration_ms_month_mean,0),
    "lag 1" = lag(duration_ms_month_mean,1),
    "lag 2" = lag(duration_ms_month_mean,2),
    "lag 3" = lag(duration_ms_month_mean,3),
    "lag 4" = lag(duration_ms_month_mean,4),
    "lag 5" = lag(duration_ms_month_mean,5),
    "lag 6" = lag(duration_ms_month_mean,6),
    "lag 7" = lag(duration_ms_month_mean,7),
    "lag 8" = lag(duration_ms_month_mean,8),
    "lag 9" = lag(duration_ms_month_mean,9),
    "lag 11"= lag(duration_ms_month_mean,11),
    "lag 10"= lag(duration_ms_month_mean,10))  %>%
  select(-duration_ms_month_mean, -month) %>%
  tidyr::gather(lag, duration_ms_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(duration_ms_month_mean, popularity_month_mean, use="complete.obs"))

#lag correlations of liveness on popularity 
spotify_mean_monthly %>%
  select(month, liveness_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(liveness_month_mean,0),
    "lag 1" = lag(liveness_month_mean,1),
    "lag 2" = lag(liveness_month_mean,2),
    "lag 3" = lag(liveness_month_mean,3),
    "lag 4" = lag(liveness_month_mean,4),
    "lag 5" = lag(liveness_month_mean,5),
    "lag 6" = lag(liveness_month_mean,6),
    "lag 7" = lag(liveness_month_mean,7),
    "lag 8" = lag(liveness_month_mean,8),
    "lag 9" = lag(liveness_month_mean,9),
    "lag 11"= lag(liveness_month_mean,11),
    "lag 10"= lag(liveness_month_mean,10))  %>%
  select(-liveness_month_mean, -month) %>%
  tidyr::gather(lag, liveness_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(liveness_month_mean, popularity_month_mean, use="complete.obs"))

#lag correlations of instrumentalness on popularity 
spotify_mean_monthly %>%
  select(month, instrumentalness_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(instrumentalness_month_mean,0),
    "lag 1" = lag(instrumentalness_month_mean,1),
    "lag 2" = lag(instrumentalness_month_mean,2),
    "lag 3" = lag(instrumentalness_month_mean,3),
    "lag 4" = lag(instrumentalness_month_mean,4),
    "lag 5" = lag(instrumentalness_month_mean,5),
    "lag 6" = lag(instrumentalness_month_mean,6),
    "lag 7" = lag(instrumentalness_month_mean,7),
    "lag 8" = lag(instrumentalness_month_mean,8),
    "lag 9" = lag(instrumentalness_month_mean,9),
    "lag 11"= lag(instrumentalness_month_mean,11),
    "lag 10"= lag(instrumentalness_month_mean,10))  %>%
  select(-instrumentalness_month_mean, -month) %>%
  tidyr::gather(lag, instrumentalness_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(instrumentalness_month_mean, popularity_month_mean, use="complete.obs"))

#lag correlations of speechiness on popularity 
spotify_mean_monthly %>%
  select(month, speechiness_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(speechiness_month_mean,0),
    "lag 1" = lag(speechiness_month_mean,1),
    "lag 2" = lag(speechiness_month_mean,2),
    "lag 3" = lag(speechiness_month_mean,3),
    "lag 4" = lag(speechiness_month_mean,4),
    "lag 5" = lag(speechiness_month_mean,5),
    "lag 6" = lag(speechiness_month_mean,6),
    "lag 7" = lag(speechiness_month_mean,7),
    "lag 8" = lag(speechiness_month_mean,8),
    "lag 9" = lag(speechiness_month_mean,9),
    "lag 11"= lag(speechiness_month_mean,11),
    "lag 10"= lag(speechiness_month_mean,10))  %>%
  select(-speechiness_month_mean, -month) %>%
  tidyr::gather(lag, speechiness_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(speechiness_month_mean, popularity_month_mean, use="complete.obs"))
```

```{r}
#lag correlations of tempo on popularity 
spotify_mean_monthly %>%
  select(month, tempo_month_mean, popularity_month_mean) %>%
  mutate(
    "lag 0" = lag(tempo_month_mean,0),
    "lag 1" = lag(tempo_month_mean,1),
    "lag 2" = lag(tempo_month_mean,2),
    "lag 3" = lag(tempo_month_mean,3),
    "lag 4" = lag(tempo_month_mean,4),
    "lag 5" = lag(tempo_month_mean,5),
    "lag 6" = lag(tempo_month_mean,6),
    "lag 7" = lag(tempo_month_mean,7),
    "lag 8" = lag(tempo_month_mean,8),
    "lag 9" = lag(tempo_month_mean,9),
    "lag 11"= lag(tempo_month_mean,11),
    "lag 10"= lag(tempo_month_mean,10))  %>%
  select(-tempo_month_mean, -month) %>%
  tidyr::gather(lag, tempo_month_mean, -popularity_month_mean) %>%
  group_by(lag) %>%
  summarize(corr = cor(tempo_month_mean, popularity_month_mean, use="complete.obs"))

#plot lag CCF
forecast::ggCcf(spotify_mean_monthly$tempo_month_mean, spotify_mean_monthly$popularity_month_mean)
```

### Fitting preliminary ARIMA model to Popularity scores

As part of our EDA, we used a step-by-step process to create an ARIMA model of mean popularity scores over time by year from 1921 to 2020. Ultimately, we will attempt to use an ARIMA component to account for left over temporal autocorrelation of the residuals in our linear model of mean song popularity based on mean song features for a given year; this initial ARIMA model may help us to inform that component by showing us the temporal patterns in song popularity over time. 

```{r step1}
# covert dataframe to time series
spotify_ts <- xts(spotify_mean_monthly$popularity_month_mean, spotify_mean_monthly$month)
spotify_ts <- as.ts(spotify_ts)

# forecast ARIMA
step1 <- forecast::ggtsdisplay(spotify_ts, points = FALSE)
```

Based on the time series visualization, we will begin by applying
first-order differencing with an $ARIMA(0,1,0)$ model. We will also 
store the root mean squared error value to track our progress while 
iterating through ARIMA models.

```{r step2, cache=TRUE}
# first-order differencing
step2 <- forecast::Arima(
  spotify_ts, order = c(0, 1, 0)
)
forecast::ggtsdisplay(step2$residuals, points = FALSE, lag.max = 36)

# store rmse value
step2_rmse <- yardstick::rmse_vec(
  spotify_ts %>% unclass(),
  step2$fitted %>% unclass()
)
```

The time series has somewhat improved, but there remains some patterns
that we can alleviate with an AR process. We will apply a MA(2) process
on top of the first-order differencing with an $ARIMA(0,1,2)$ model. 

```{r step3, cache=TRUE}
# first order differencing
# MA(2)
step3 <- forecast::Arima(
  spotify_ts, order = c(0, 1, 2)
)
forecast::ggtsdisplay(step3$residuals, points = FALSE, lag.max = 36)

# store rmse value
step3_rmse <- yardstick::rmse_vec(
  spotify_ts %>% unclass(),
  step3$fitted %>% unclass()
 )
```

The AR component somewhat improved the model, bringing the root mean squared
error from `r round(step2_rmse, 2)` to `r round(step3_rmse, 2)`. We can confirm
our findings using the `auto.arima` function:

```{r auto-model-selection}
# auto arima on time series
forecast::auto.arima(spotify_ts)
```

```{r model-fit}
# model fit
model = "Final Model - forecast::Arima (0,1,2) "
rmse = (spotify_ts-step3$fitted)^2 %>% mean() %>% sqrt() %>% round(3) %>% paste0("   [RMSE: ", . ,"]")

step3 %>%
  {tibble(
    spotify_ts = spotify_ts %>% unclass(),
    model = .$fitted %>% unclass(),
    time  = time(.$fitted) %>% unclass()
  )} %>% 
  tidyr::gather(var, popularity_year_mean, -time) %>%
  mutate(var = forcats::as_factor(var)) %>%
  ggplot(aes(x=time, y=popularity_year_mean, color=var)) + 
    geom_line(alpha=0.75, size=0.8) +
    labs(title = paste(model, rmse), x = "Time", y = "Average Popularity Score",
         color = "")
```

After applying first order differencing and an MA(2) component,
the model fit appears to be finished! The ACF and PACF do not appear to have a pattern 
after the final step, and the final model against the given data looks sufficient as well. 
The model for this data required the following parameters: $ARIMA(0,1,2)$, and the final 
root mean squared error is `r round(step3_rmse, 2)`.

```{r arima-model-output}
# report ARIMA model
m = as_tsibble(spotify_ts) %>% 
  model(ARIMA(value ~ pdq(0, 1, 2)))
```

## Model fitting 

Our goal in creating this model is to predict monthly mean song popularity based on monthly mean song features. From our EDA, we can see that _____ had associations with monthly mean song popularity. We will start by fitting a multiple linear regression model with mean monthly popularity as the outcome, the features identified in EDA as predictors, and  no temporal component. 

```{r}
# fit model
model1 <- lm(popularity_month_mean ~ danceability_month_mean + energy_month_mean + explicit_month_mean +
               instrumentalness_month_mean + loudness_month_mean + tempo_month_mean, data = spotify_mean_monthly) 

# output model
summary(model1)

# store RMSE and AIC
model1_rmse <- yardstick::rmse_vec(
  spotify_mean_monthly$popularity_month_mean,
  model1$fitted
 )
model1_aic <- AIC(model1)
```

```{r, echo=FALSE}
# plot predicted values and actual values
spotify_mean_monthly$predmodel1 = predict(model1)
ggplot(spotify_mean_monthly, aes(y = popularity_month_mean, x = month, color)) +
                  geom_line() + 
  geom_line(aes(y = predmodel1, color ="pink")) + 
  labs("Predicted vs. Observed, Model 1")
```

```{r}
# fit model
model2 = lm(popularity_month_mean ~ danceability_month_mean + energy_month_mean + explicit_month_mean + 
              instrumentalness_month_mean + loudness_month_mean + tempo_month_mean + 
              lag(tempo_month_mean, 10),
            data = spotify_mean_monthly)

# output model
summary(model2)

# store RMSE and AIC
model2_rmse <- model2 %>% 
  broom::augment(newdata = spotify_mean_monthly) %>% 
  mutate(rmse = yardstick::rmse_vec(popularity_month_mean, .fitted)) %>% 
  select(rmse) %>% 
  first() %>% 
  pull()

model2_aic <- AIC(model2)
```

```{r}
# visualize residuals
forecast::ggtsdisplay(model2$residuals, points=FALSE)

# visualize lag on residuals
forecast::ggCcf(spotify_mean_monthly$popularity_month_mean, model2$residuals)
```

```{r}
# fit model
model3 = lm(popularity_month_mean ~ danceability_month_mean + energy_month_mean + explicit_month_mean + 
              instrumentalness_month_mean + loudness_month_mean + tempo_month_mean + 
              lag(tempo_month_mean, 10) + lag(popularity_month_mean, 10),
            data = spotify_mean_monthly)

# output model
summary(model3)

# store RMSE and AIC
model3_rmse <- model3 %>% 
  broom::augment(newdata = spotify_mean_monthly) %>% 
  mutate(rmse = yardstick::rmse_vec(popularity_month_mean, .fitted)) %>% 
  select(rmse) %>% 
  first() %>% 
  pull()

model3_aic <- AIC(model3)
```

```{r, echo=FALSE}
# plot predicted values and actual values
model3 %>% 
  broom::augment(newdata = spotify_mean_monthly) %>% 
  ggplot(aes(y = popularity_month_mean, x = month, color)) +
  geom_line() +
  geom_line(aes(y = .fitted, color = "pink")) + 
  labs("Predicted vs. Observed, Model 3")

# visualize residuals
forecast::ggtsdisplay(model2$residuals, points=FALSE)
```

```{r}
# Create matrix of predictors
xreg <- cbind(energy_month_mean=spotify_mean_monthly$energy_month_mean, 
              explicit_month_mean=spotify_mean_monthly$explicit_month_mean,
              danceability_month_mean=spotify_mean_monthly$danceability_month_mean, 
              instrumentalness_month_mean=spotify_mean_monthly$instrumentalness_month_mean,
              loudness_month_mean=spotify_mean_monthly$loudness_month_mean, 
              tempo_month_mean=spotify_mean_monthly$tempo_month_mean
              )

# Remove intercept and isolate response variable
xreg <- xreg[,-1]
popularity <- ts(spotify_mean_monthly$popularity_month_mean)

# fit model
model4 <- auto.arima(popularity, xreg=xreg)

# output model
summary(model4)

# store AIC
model4_aic <- AIC(model4)
```

## Discussion

Discussion goes here...
